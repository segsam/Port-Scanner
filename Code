import socket
import argparse
from concurrent.futures import ThreadPoolExecutor, as_completed
from datetime import datetime

def scan_port(ip, port, timeout):
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.settimeout(timeout)
            result = s.connect_ex((ip, port))
            if result == 0:
                return port, True
    except Exception:
        pass
    return port, False

def main():
    parser = argparse.ArgumentParser(description="Simple concurrent TCP port scanner")
    parser.add_argument("host", help="Hostname or IP to scan")
    parser.add_argument("-p", "--ports", default="1-1024",
                        help="Port range, e.g. 1-1024 or 22,80,443")
    parser.add_argument("-t", "--threads", type=int, default=100,
                        help="Number of concurrent threads")
    parser.add_argument("--timeout", type=float, default=0.8,
                        help="Socket timeout in seconds")
    args = parser.parse_args()

    # Resolve host
    try:
        ip = socket.gethostbyname(args.host)
    except socket.gaierror:
        print("Hostname could not be resolved.")
        return

    # Expand port list
    ports = []
    if "-" in args.ports:
        a, b = args.ports.split("-", 1)
        ports = list(range(int(a), int(b) + 1))
    else:
        for part in args.ports.split(','):
            ports.append(int(part.strip()))

    print(f"Scanning {args.host} ({ip}) ports: {len(ports)} using {args.threads} threads")
    start = datetime.now()

    open_ports = []
    with ThreadPoolExecutor(max_workers=args.threads) as executor:
        futures = {executor.submit(scan_port, ip, port, args.timeout): port for port in ports}
        for fut in as_completed(futures):
            port, is_open = fut.result()
            if is_open:
                open_ports.append(port)
                print(f"Port {port}: Open")

    end = datetime.now()
    print("Scan duration:", end - start)
    if open_ports:
        print("Open ports:", sorted(open_ports))
    else:
        print("No open ports found in range.")

if __name__ == "__main__":
    main()
